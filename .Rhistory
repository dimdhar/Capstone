class(flags)
cls_list <-lapply(flags,class(flags))
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
Try sum(flags$orange)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sim)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean(flag_colors))
sapply(flag_colors,mean)
flag_shapes <- flags[19:23]
flag_shapes <- flags[,19:23]
flag_range <- range(flag_shapes)
flag_range <- lapply(flag_shapes,range)
flag_range <- lapply(flag_shapes,range())
flag_range <-lapply(flag_shapes, range)
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <-sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique(flags)
unique_vals <-lapply(flags,unique)
unique_vals
length(unique_vals)
info()
sapply(unique_vals,length)
sapply(flags,unique)
testfunction <--lapply(unique_vals, function(elem) elem[2])
lapply(unique_vals, function(elem) elem[2])
1
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population,flags$red, summary)
tapply(flags$population,flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample()
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20,10)
sample(LETTERS)
LETTERS
sample(LETTERS)
flips<- sample(c(0,1),100,prob = c(0.3, 0.7))
flips<- sample(c(0,1),100,TRUE,prob = c(0.3, 0.7))
flips
sum(flips,1)
sum(flips)
?rbinom
rbinom(1,100,0.7
rbinom(1,100,0.7)
rbinom(1,100,0.7)
rbinom(100,1,0.7)
flips2 <- rbinom(100,1,0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = Speed, y = cars$speed)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,xlab = "Speed", ylab = "Stopping Distance", main="My Plot")
plot(cars, main="My Plot")
plot(cars, main="My Plot")
plot(cars, sub="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col = 2)
plot(cars,xlim = c(10, 15) )
plot(cars,pch=2 )
load(mtcars)
data(mtcars)
?boxplot
boxplot(mpg~cyl,mtcars)
hist(mtcars@mpg)
hist(mpg,mtcars@mpg)
hist(mtcars$mpg)
library(swirl)
ls()
rm(list=ls())
ls()
swirl()
swirl()
library(swirl)
library("swirl")
swirl()
library(swirl)
install_course("Regression_Models")
swirl()
swirl()
getOption("editor")
options(editor = "internal")
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
'mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <-glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
hich.max(hits[,'visits'])
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
mdl2 <- glm(simplystats ~ date, poisson, hits, offset=log(visits+1))
qpois(.95, mdl2$fitted.values[704])
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
modRF <- train(y ~ ., data=vowel.train, method="rf")
modRF <- train
library("train")
library(ElemStatLearn)
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
train <- sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAheart[-train,]
missClass <- function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
set.seed(13234)
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
train
fit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, data=trainSA, method="glm", family="binomial")
install.packages("caret")
install.packages("RANN")
install.packages("e1071")
install.packages("rpart.plot")
install.packages("rattle")
install.packages("RGtk2")
install.packages("rattle")
install.packages("RGtk2Extras")
install.packages("RGtk2")
ap<-available.packages()
View(ap)
install.packages("caret")
install.packages("rpart.plot")
install.packages("RGtk2")
install.packages("rattle")
install.packages("rattle")
install.packages(GTK+)
install.packages("GTK+")
shiny
load shiny
install.packages("shiny")
install.packages("shiny")
library(shiny)
install.packages("shiny")
install.packages("shiny")
library("shiny")
runExample("01_hello")
---
title: "Coursera Data Science Capstone Milestone Report"
author: "kylase-coursera"
date: "25 July 2015"
output:
html_document:
theme: flatly
---
# Introduction
The Capstone Project is about building a web application that does predictive text system that will provide a list of possible words based on the previous word(s) entered.
---
title: "Coursera Data Science Capstone Milestone Report"
author: "kylase-coursera"
date: "25 July 2015"
output:
html_document:
theme: flatly
---
# Introduction
The Capstone Project is about building a web application that does predictive text system that will provide a list of possible words based on the previous word(s) entered.
This project requires the concepts of Natural Language Processing (NLP) such as n-gram.
---
title: "Coursera Data Science Capstone Milestone Report"
author: "kylase-coursera"
date: "25 July 2015"
output:
html_document:
theme: flatly
---
load(flatly)
---
---
title: "Coursera Data Science Capstone Milestone Report"
author: "Dimple Dhar"
date: "15th october 2018"
output:
html_document: default
pdf_document:default
---
install.packages("knitr")
library(knitr)
library(knitr)
---
title: "Coursera Data Science Capstone Milestone Report"
author: "Dimple Dhar"
output:
html_document: default
pdf_document:default
---
shiny::runApp('C:/Dimple/Training/Coursera/CapstoneData/coursera-data-science-capstone-master/coursera-data-science-capstone-master')
Coursera Data Science Capstone: Course Project
========================================================
author: Sriharsha
date: December 30, 2016
Overview
========================================================
If you haven't tried out the app, go [here](https://sriharshams.shinyapps.io/data-science-capstone/) to try it!
- Predicts next word as the user types a sentence
- Similar to the way most smart phone keyboards are implemented today using the technology of Swiftkey
How To Use the App
========================================================
![Instructions](./www/app.png)
Getting & Cleaning the Data
========================================================
- A subset of the original data was sampled from the three sources (blogs,twitter and news) which is then merged into one.
- Next, data cleaning is done by conversion to lowercase, strip white space, and removing punctuation and numbers.
- The corresponding n-grams are then created (Quadgram,Trigram and Bigram).
- Next, the term-count tables are extracted from the N-Grams and sorted according to the frequency in descending order.
- Lastly, the n-gram objects are saved as R-Compressed files (.RData files).
Underlying Algorithm
========================================================
- N-gram model with "Stupid Backoff" ([Brants et al 2007](http://www.cs.columbia.edu/~smaskey/CS6998-0412/supportmaterial/langmodel_mapreduce.pdf))
- Checks if highest-order (in this case, n=4) n-gram has been seen. If not "degrades" to a lower-order model (n=3, 2); we would use even higher orders, but ShinyApps caps app size at 100mb
<div style="align:top"><img src="./www/algo-flow.png" alt="algorithm flow" /></div>
Further Exploration
========================================================
- The code is available on [GitHub](https://github.com/sriharshams/coursera-data-science-capstone)
- Further work can expand the main weakness of this approach: long-range context
1. Current algorithm discards contextual information past 4-grams
2. We can incorporate this into future work through clustering underlying training corpus/data and predicting what cluster the entire sentence would fall into
3. This allows us to predict using ONLY the data subset that fits the long-range context of the sentence, while still preserving the performance characteristics of an n-gram and Stupid Backoff model
---
title: "Shiny Gadgets"
author: "The Johns Hopkins Data Science Lab"
output:
ioslides_presentation:
logo: ../../img/bloomberg_shield.png
beamer_presentation: default
always_allow_html: yes
---
## Introduction
Shiny Gadgets provide a way to use Shiny's interactivity and
user interface tools as a part of a data analysis. With
Shiny Gadgets you can create a function that opens a small
Shiny app. Since these apps are smaller we'll be using the
miniUI package for creating user interfaces.
## A Simple Gadget
At its core a Shiny Gadget is a function that launches a
small (single-page) Shiny application. Since Shiny Gadgets
are meant to be displayed in the RStudio viewer pane, the
miniUI package comes in handy for its smaller graphical
elements. Let's construct a very simple Shiny Gadget.
## A Simple Gadget: Code
```r
library(shiny)
library(miniUI)
myFirstGadget <- function() {
ui <- miniPage(
gadgetTitleBar("My First Gadget")
)
server <- function(input, output, session) {
# The Done button closes the app
observeEvent(input$done, {
stopApp()
})
}
runGadget(ui, server)
}
```
## A Simple Gadget: Image
![myFirstGadget](myFirstGadget.png)
## A Simple Gadget: Code Review
Source the preceding code and run `myFirstGadget()` to see
a very basic Shiny Gadget. Just to review some of the new
functions in this Gadget:
- `miniPage()` creates a small layout.
- `gadgetTitleBar()` provides a title bar with Done and
Cancel buttons.
- `runGadget()` runs the Shiny Gadget, taking `ui` and
`server` as arguments.
## Gadgets with Arguments
One of the advantages of Shiny Gadgets is that since Shiny
Gadgets are functions they can take values as arguments and
they can return values. Let's take a look at a simple
example of a Shiny Gadget that takes arguments and returns
a value. The following Shiny Gadget takes two different
vectors of numbers as arguments and uses those vectors to
populate two `selectInput`s. The user can then choose two
numbers within the Gadget, and the product of those two
numbers will be returned.
## Gadgets with Arguments: Code Part 1
```r
library(shiny)
library(miniUI)
multiplyNumbers <- function(numbers1, numbers2) {
ui <- miniPage(
gadgetTitleBar("Multiply Two Numbers"),
miniContentPanel(
selectInput("num1", "First Number", choices=numbers1),
selectInput("num2", "Second Number", choices=numbers2)
)
)
```
## Gadgets with Arguments: Code Part 2
```r
server <- function(input, output, session) {
observeEvent(input$done, {
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
stopApp(num1 * num2)
})
}
runGadget(ui, server)
}
```
## Gadgets with Arguments: Image
![multiplyNumbers](multiplyNumbers.png)
## Gadgets with Arguments: Code Review
Source the preceding code and run
`multiplyNumbers(1:5, 6:10)` so you
can get a sense of how this Gadget works. As you can see
this Gadget uses `selectInput()` so that the user can
select two different numbers. Clicking the Done button
multiplies the tow numbers together, which is returned as
the result of the `multiplyNumbers()` function.
## Gadgets with Interactive Graphics
Shiny Gadgets are particularly useful when a data analysis
needs a touch of human intervention. You can imagine
presenting an interactive data visualization through a
Gadget, where an analyst could manipulate data in the
Gadget, and then the Gadget would return the manipulated
data. Let's walk though an example of how this could be done.
## Gadgets with Interactive Graphics: Code Part 1
```r
library(shiny)
library(miniUI)
pickTrees <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
)
```
## Gadgets with Interactive Graphics: Code Part 2
```r
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(trees$Girth, trees$Volume, main = "Trees!",
xlab = "Girth", ylab = "Volume")
})
observeEvent(input$done, {
stopApp(brushedPoints(trees, input$brush,
xvar = "Girth", yvar = "Volume"))
})
}
runGadget(ui, server)
}
```
## Gadgets with Interactive Graphics: Image
![pickTrees](pickTrees.png)
## Gadgets with Interactive Graphics: Code Review
Source the preceding code and run `pickTrees()`. Click and
drag a box over the graph. Once you've drawn a box that
you're satisfied with click the Done button and the points
that you selected will be returned to you as a data frame.
This functionality is made possible by the `brushedPoints()`
function, which is part of the `shiny` package. (See
`?shiny::brushedPoints` for more information.)
## Conclusion
For more details about Shiny Gadgets visit the Shiny Gadgets
website:
- http://shiny.rstudio.com/articles/gadgets.html
- http://shiny.rstudio.com/articles/gadget-ui.html
runApp('C:/Dimple/Training/Coursera/Developing_Data_Products-master/Developing_Data_Products-master/Shiny_Part_1/app1')
runApp('C:/Dimple/Training/Coursera/Developing_Data_Products-master/Developing_Data_Products-master/Shiny_Part_1/app1')
runApp('C:/Dimple/Training/Coursera/Developing_Data_Products-master/Developing_Data_Products-master/Shiny_Part_1/app1')
runApp('C:/Dimple/Training/Coursera/Developing_Data_Products-master/Developing_Data_Products-master/Shiny_Part_1/app2')
runApp('C:/Dimple/Training/Coursera/Developing_Data_Products-master/Developing_Data_Products-master/Shiny_Part_1/app3')
runApp('C:/Dimple/Training/Coursera/Developing_Data_Products-master/Developing_Data_Products-master/Shiny_Part_1/app4')
runApp('C:/Dimple/Training/Coursera/Developing_Data_Products-master/Developing_Data_Products-master/Shiny_Part_2/app1')
runApp('C:/Dimple/Training/Coursera/Developing_Data_Products-master/Developing_Data_Products-master/Shiny_Part_2/app1')
shiny::runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject')
runApp('C:/Dimple/Training/Coursera/CapstoneData/DataScienceCapstone-master/DataScienceCapstone-master')
runApp('C:/Dimple/Training/Coursera/CapstoneData/DataScienceCapstone-master/DataScienceCapstone-master')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject/Example1')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject/Example1')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject/Example1')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject/Example1')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject/Example1')
runApp('C:/Dimple/Training/Coursera/CapstoneData/CapstoneFinalProject/Example1')
runApp()
runApp()
runApp()
load("C:/Dimple/Training/Coursera/CapstoneData/coursera-data-science-capstone-master/coursera-data-science-capstone-master/bigram.RData")
head(bigram)
bigram <- ("C:/Dimple/Training/Coursera/CapstoneData/coursera-data-science-capstone-master/coursera-data-science-capstone-master/bigram.RData")
f_blog <-readLines(bigram, encoding="UTF-8", skipNul = TRUE)
bigram <- ("C:/Dimple/Training/Coursera/CapstoneData/coursera-data-science-capstone-master/coursera-data-science-capstone-master/bigram.RData")
f_blog <-readLines(bigram, encoding="UTF-8", skipNul = TRUE)
f_blog
bigram <- ("C:/Dimple/Training/Coursera/CapstoneData/coursera-data-science-capstone-master/coursera-data-science-capstone-master/bigram.RData")
f_blog <-readLines(bigram, encoding="UTF-8", skipNul = TRUE)
head(f_blog)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
